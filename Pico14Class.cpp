/*----- PROTECTED REGION ID(Pico14Class.cpp) ENABLED START -----*/
static const char *RcsId      = "$Id:  $";
static const char *TagName    = "$Name:  $";
static const char *CvsPath    = "$Source:  $";
static const char *SvnPath    = "$HeadURL:  $";
static const char *HttpServer = "http://www.esrf.eu/computing/cs/tango/tango_doc/ds_doc/";
//=============================================================================
//
// file :        Pico14Class.cpp
//
// description : C++ source for the Pico14Class.
//               A singleton class derived from DeviceClass.
//               It implements the command and attribute list
//               and all properties and methods required
//               by the Pico14 once per process.
//
// project :     Pico14
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <Pico14Class.h>

/*----- PROTECTED REGION END -----*/	//	Pico14Class.cpp

//-------------------------------------------------------------------
/**
 *	Create Pico14Class singleton and
 *	return it in a C function for Python usage
 */
//-------------------------------------------------------------------
extern "C" {
#ifdef _TG_WINDOWS_

__declspec(dllexport)

#endif

	Tango::DeviceClass *_create_Pico14_class(const char *name) {
		return Pico14_ns::Pico14Class::init(name);
	}
}

namespace Pico14_ns
{
//===================================================================
//	Initialize pointer for singleton pattern
//===================================================================
Pico14Class *Pico14Class::_instance = NULL;

//--------------------------------------------------------
/**
 * method : 		Pico14Class::Pico14Class(string &s)
 * description : 	constructor for the Pico14Class
 *
 * @param s	The class name
 */
//--------------------------------------------------------
Pico14Class::Pico14Class(string &s):Tango::DeviceClass(s)
{
	cout2 << "Entering Pico14Class constructor" << endl;
	set_default_property();
	write_class_property();

	/*----- PROTECTED REGION ID(Pico14Class::constructor) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Pico14Class::constructor

	cout2 << "Leaving Pico14Class constructor" << endl;
}

//--------------------------------------------------------
/**
 * method : 		Pico14Class::~Pico14Class()
 * description : 	destructor for the Pico14Class
 */
//--------------------------------------------------------
Pico14Class::~Pico14Class()
{
	/*----- PROTECTED REGION ID(Pico14Class::destructor) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Pico14Class::destructor

	_instance = NULL;
}


//--------------------------------------------------------
/**
 * method : 		Pico14Class::init
 * description : 	Create the object if not already done.
 *                  Otherwise, just return a pointer to the object
 *
 * @param	name	The class name
 */
//--------------------------------------------------------
Pico14Class *Pico14Class::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			string s(name);
			_instance = new Pico14Class(s);
		}
		catch (bad_alloc &)
		{
			throw;
		}
	}
	return _instance;
}

//--------------------------------------------------------
/**
 * method : 		Pico14Class::instance
 * description : 	Check if object already created,
 *                  and return a pointer to the object
 */
//--------------------------------------------------------
Pico14Class *Pico14Class::instance()
{
	if (_instance == NULL)
	{
		cerr << "Class is not initialised !!" << endl;
		exit(-1);
	}
	return _instance;
}



//===================================================================
//	Command execution method calls
//===================================================================
//--------------------------------------------------------
/**
 * method : 		OnClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *OnClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "OnClass::execute(): arrived" << endl;
	((static_cast<Pico14 *>(device))->on());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		OffClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *OffClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "OffClass::execute(): arrived" << endl;
	((static_cast<Pico14 *>(device))->off());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetDefaultsClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetDefaultsClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "SetDefaultsClass::execute(): arrived" << endl;
	((static_cast<Pico14 *>(device))->set_defaults());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		StartStreamingClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *StartStreamingClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "StartStreamingClass::execute(): arrived" << endl;
	((static_cast<Pico14 *>(device))->start_streaming());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		StopStreamingClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *StopStreamingClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "StopStreamingClass::execute(): arrived" << endl;
	((static_cast<Pico14 *>(device))->stop_streaming());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		CollectBlockClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *CollectBlockClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "CollectBlockClass::execute(): arrived" << endl;
	((static_cast<Pico14 *>(device))->collect_block());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		UpdateClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *UpdateClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "UpdateClass::execute(): arrived" << endl;
	((static_cast<Pico14 *>(device))->update());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		Update_newClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *Update_newClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "Update_newClass::execute(): arrived" << endl;
	((static_cast<Pico14 *>(device))->update_new());
	return new CORBA::Any();
}


//===================================================================
//	Properties management
//===================================================================
//--------------------------------------------------------
/**
 *	Method      : Pico14Class::get_class_property()
 *	Description : Get the class property for specified name.
 */
//--------------------------------------------------------
Tango::DbDatum Pico14Class::get_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_prop.size() ; i++)
		if (cl_prop[i].name == prop_name)
			return cl_prop[i];
	//	if not found, returns  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : Pico14Class::get_default_device_property()
 *	Description : Return the default value for device property.
 */
//--------------------------------------------------------
Tango::DbDatum Pico14Class::get_default_device_property(string &prop_name)
{
	for (unsigned int i=0 ; i<dev_def_prop.size() ; i++)
		if (dev_def_prop[i].name == prop_name)
			return dev_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : Pico14Class::get_default_class_property()
 *	Description : Return the default value for class property.
 */
//--------------------------------------------------------
Tango::DbDatum Pico14Class::get_default_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_def_prop.size() ; i++)
		if (cl_def_prop[i].name == prop_name)
			return cl_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}


//--------------------------------------------------------
/**
 *	Method      : Pico14Class::set_default_property()
 *	Description : Set default property (class and device) for wizard.
 *                For each property, add to wizard property name and description.
 *                If default value has been set, add it to wizard property and
 *                store it in a DbDatum.
 */
//--------------------------------------------------------
void Pico14Class::set_default_property()
{
	string	prop_name;
	string	prop_desc;
	string	prop_def;
	vector<string>	vect_data;

	//	Set Default Class Properties

	//	Set Default device Properties
}

//--------------------------------------------------------
/**
 *	Method      : Pico14Class::write_class_property()
 *	Description : Set class description fields as property in database
 */
//--------------------------------------------------------
void Pico14Class::write_class_property()
{
	//	First time, check if database used
	if (Tango::Util::_UseDb == false)
		return;

	Tango::DbData	data;
	string	classname = get_name();
	string	header;
	string::size_type	start, end;

	//	Put title
	Tango::DbDatum	title("ProjectTitle");
	string	str_title("Pico14");
	title << str_title;
	data.push_back(title);

	//	Put Description
	Tango::DbDatum	description("Description");
	vector<string>	str_desc;
	str_desc.push_back("Pico14");
	description << str_desc;
	data.push_back(description);

	//	put cvs or svn location
	string	filename("Pico14");
	filename += "Class.cpp";

	// check for cvs information
	string	src_path(CvsPath);
	start = src_path.find("/");
	if (start!=string::npos)
	{
		end   = src_path.find(filename);
		if (end>start)
		{
			string	strloc = src_path.substr(start, end-start);
			//	Check if specific repository
			start = strloc.find("/cvsroot/");
			if (start!=string::npos && start>0)
			{
				string	repository = strloc.substr(0, start);
				if (repository.find("/segfs/")!=string::npos)
					strloc = "ESRF:" + strloc.substr(start, strloc.length()-start);
			}
			Tango::DbDatum	cvs_loc("cvs_location");
			cvs_loc << strloc;
			data.push_back(cvs_loc);
		}
	}

	// check for svn information
	else
	{
		string	src_path(SvnPath);
		start = src_path.find("://");
		if (start!=string::npos)
		{
			end = src_path.find(filename);
			if (end>start)
			{
				header = "$HeadURL: ";
				start = header.length();
				string	strloc = src_path.substr(start, (end-start));
				
				Tango::DbDatum	svn_loc("svn_location");
				svn_loc << strloc;
				data.push_back(svn_loc);
			}
		}
	}

	//	Get CVS or SVN revision tag
	
	// CVS tag
	string	tagname(TagName);
	header = "$Name: ";
	start = header.length();
	string	endstr(" $");
	
	end   = tagname.find(endstr);
	if (end!=string::npos && end>start)
	{
		string	strtag = tagname.substr(start, end-start);
		Tango::DbDatum	cvs_tag("cvs_tag");
		cvs_tag << strtag;
		data.push_back(cvs_tag);
	}
	
	// SVN tag
	string	svnpath(SvnPath);
	header = "$HeadURL: ";
	start = header.length();
	
	end   = svnpath.find(endstr);
	if (end!=string::npos && end>start)
	{
		string	strloc = svnpath.substr(start, end-start);
		
		string tagstr ("/tags/");
		start = strloc.find(tagstr);
		if ( start!=string::npos )
		{
			start = start + tagstr.length();
			end   = strloc.find(filename);
			string	strtag = strloc.substr(start, end-start-1);
			
			Tango::DbDatum	svn_tag("svn_tag");
			svn_tag << strtag;
			data.push_back(svn_tag);
		}
	}

	//	Get URL location
	string	httpServ(HttpServer);
	if (httpServ.length()>0)
	{
		Tango::DbDatum	db_doc_url("doc_url");
		db_doc_url << httpServ;
		data.push_back(db_doc_url);
	}

	//  Put inheritance
	Tango::DbDatum	inher_datum("InheritedFrom");
	vector<string> inheritance;
	inheritance.push_back("TANGO_BASE_CLASS");
	inher_datum << inheritance;
	data.push_back(inher_datum);

	//	Call database and and values
	get_db_class()->put_property(data);
}

//===================================================================
//	Factory methods
//===================================================================

//--------------------------------------------------------
/**
 *	Method      : Pico14Class::device_factory()
 *	Description : Create the device object(s)
 *                and store them in the device list
 */
//--------------------------------------------------------
void Pico14Class::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{
	/*----- PROTECTED REGION ID(Pico14Class::device_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	Pico14Class::device_factory_before

	//	Create devices and add it into the device list
	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;
		device_list.push_back(new Pico14(this, (*devlist_ptr)[i]));
	}

	//	Manage dynamic attributes if any
	erase_dynamic_attributes(devlist_ptr, get_class_attr()->get_attr_list());

	//	Export devices to the outside world
	for (unsigned long i=1 ; i<=devlist_ptr->length() ; i++)
	{
		//	Add dynamic attributes if any
		Pico14 *dev = static_cast<Pico14 *>(device_list[device_list.size()-i]);
		dev->add_dynamic_attributes();

		//	Check before if database used.
		if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
			export_device(dev);
		else
			export_device(dev, dev->get_name().c_str());
	}

	/*----- PROTECTED REGION ID(Pico14Class::device_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	Pico14Class::device_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : Pico14Class::attribute_factory()
 *	Description : Create the attribute object(s)
 *                and store them in the attribute list
 */
//--------------------------------------------------------
void Pico14Class::attribute_factory(vector<Tango::Attr *> &att_list)
{
	/*----- PROTECTED REGION ID(Pico14Class::attribute_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	Pico14Class::attribute_factory_before
	//	Attribute : chanAstream
	chanAstreamAttrib	*chanastream = new chanAstreamAttrib();
	Tango::UserDefaultAttrProp	chanastream_prop;
	//	description	not set for chanAstream
	//	label	not set for chanAstream
	//	unit	not set for chanAstream
	//	standard_unit	not set for chanAstream
	//	display_unit	not set for chanAstream
	//	format	not set for chanAstream
	//	max_value	not set for chanAstream
	//	min_value	not set for chanAstream
	//	max_alarm	not set for chanAstream
	//	min_alarm	not set for chanAstream
	//	max_warning	not set for chanAstream
	//	min_warning	not set for chanAstream
	//	delta_t	not set for chanAstream
	//	delta_val	not set for chanAstream
	
	chanastream->set_default_properties(chanastream_prop);
	//	Not Polled
	chanastream->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(chanastream);

	//	Attribute : chanA
	chanAAttrib	*chana = new chanAAttrib();
	Tango::UserDefaultAttrProp	chana_prop;
	//	description	not set for chanA
	//	label	not set for chanA
	//	unit	not set for chanA
	//	standard_unit	not set for chanA
	//	display_unit	not set for chanA
	//	format	not set for chanA
	//	max_value	not set for chanA
	//	min_value	not set for chanA
	//	max_alarm	not set for chanA
	//	min_alarm	not set for chanA
	//	max_warning	not set for chanA
	//	min_warning	not set for chanA
	//	delta_t	not set for chanA
	//	delta_val	not set for chanA
	
	chana->set_default_properties(chana_prop);
	//	Not Polled
	chana->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(chana);

	//	Attribute : chanB
	chanBAttrib	*chanb = new chanBAttrib();
	Tango::UserDefaultAttrProp	chanb_prop;
	//	description	not set for chanB
	//	label	not set for chanB
	//	unit	not set for chanB
	//	standard_unit	not set for chanB
	//	display_unit	not set for chanB
	//	format	not set for chanB
	//	max_value	not set for chanB
	//	min_value	not set for chanB
	//	max_alarm	not set for chanB
	//	min_alarm	not set for chanB
	//	max_warning	not set for chanB
	//	min_warning	not set for chanB
	//	delta_t	not set for chanB
	//	delta_val	not set for chanB
	
	chanb->set_default_properties(chanb_prop);
	//	Not Polled
	chanb->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(chanb);


	//	Create a list of static attributes
	create_static_attribute_list(get_class_attr()->get_attr_list());
	/*----- PROTECTED REGION ID(Pico14Class::attribute_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	Pico14Class::attribute_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : Pico14Class::pipe_factory()
 *	Description : Create the pipe object(s)
 *                and store them in the pipe list
 */
//--------------------------------------------------------
void Pico14Class::pipe_factory()
{
	/*----- PROTECTED REGION ID(Pico14Class::pipe_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	Pico14Class::pipe_factory_before
	/*----- PROTECTED REGION ID(Pico14Class::pipe_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	Pico14Class::pipe_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : Pico14Class::command_factory()
 *	Description : Create the command object(s)
 *                and store them in the command list
 */
//--------------------------------------------------------
void Pico14Class::command_factory()
{
	/*----- PROTECTED REGION ID(Pico14Class::command_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	Pico14Class::command_factory_before


	//	Command On
	OnClass	*pOnCmd =
		new OnClass("On",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pOnCmd);

	//	Command Off
	OffClass	*pOffCmd =
		new OffClass("Off",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pOffCmd);

	//	Command SetDefaults
	SetDefaultsClass	*pSetDefaultsCmd =
		new SetDefaultsClass("SetDefaults",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetDefaultsCmd);

	//	Command StartStreaming
	StartStreamingClass	*pStartStreamingCmd =
		new StartStreamingClass("StartStreaming",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pStartStreamingCmd);

	//	Command StopStreaming
	StopStreamingClass	*pStopStreamingCmd =
		new StopStreamingClass("StopStreaming",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pStopStreamingCmd);

	//	Command CollectBlock
	CollectBlockClass	*pCollectBlockCmd =
		new CollectBlockClass("CollectBlock",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pCollectBlockCmd);

	//	Command Update
	UpdateClass	*pUpdateCmd =
		new UpdateClass("Update",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	pUpdateCmd->set_polling_period(200);
	command_list.push_back(pUpdateCmd);

	//	Command Update_new
	Update_newClass	*pUpdate_newCmd =
		new Update_newClass("Update_new",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	pUpdate_newCmd->set_polling_period(300);
	command_list.push_back(pUpdate_newCmd);

	/*----- PROTECTED REGION ID(Pico14Class::command_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	Pico14Class::command_factory_after
}

//===================================================================
//	Dynamic attributes related methods
//===================================================================

//--------------------------------------------------------
/**
 * method : 		Pico14Class::create_static_attribute_list
 * description : 	Create the a list of static attributes
 *
 * @param	att_list	the ceated attribute list
 */
//--------------------------------------------------------
void Pico14Class::create_static_attribute_list(vector<Tango::Attr *> &att_list)
{
	for (unsigned long i=0 ; i<att_list.size() ; i++)
	{
		string att_name(att_list[i]->get_name());
		transform(att_name.begin(), att_name.end(), att_name.begin(), ::tolower);
		defaultAttList.push_back(att_name);
	}

	cout2 << defaultAttList.size() << " attributes in default list" << endl;

	/*----- PROTECTED REGION ID(Pico14Class::create_static_att_list) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Pico14Class::create_static_att_list
}


//--------------------------------------------------------
/**
 * method : 		Pico14Class::erase_dynamic_attributes
 * description : 	delete the dynamic attributes if any.
 *
 * @param	devlist_ptr	the device list pointer
 * @param	list of all attributes
 */
//--------------------------------------------------------
void Pico14Class::erase_dynamic_attributes(const Tango::DevVarStringArray *devlist_ptr, vector<Tango::Attr *> &att_list)
{
	Tango::Util *tg = Tango::Util::instance();

	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		Tango::DeviceImpl *dev_impl = tg->get_device_by_name(((string)(*devlist_ptr)[i]).c_str());
		Pico14 *dev = static_cast<Pico14 *> (dev_impl);

		vector<Tango::Attribute *> &dev_att_list = dev->get_device_attr()->get_attribute_list();
		vector<Tango::Attribute *>::iterator ite_att;
		for (ite_att=dev_att_list.begin() ; ite_att != dev_att_list.end() ; ++ite_att)
		{
			string att_name((*ite_att)->get_name_lower());
			if ((att_name == "state") || (att_name == "status"))
				continue;
			vector<string>::iterator ite_str = find(defaultAttList.begin(), defaultAttList.end(), att_name);
			if (ite_str == defaultAttList.end())
			{
				cout2 << att_name << " is a UNWANTED dynamic attribute for device " << (*devlist_ptr)[i] << endl;
				Tango::Attribute &att = dev->get_device_attr()->get_attr_by_name(att_name.c_str());
				dev->remove_attribute(att_list[att.get_attr_idx()], true, false);
				--ite_att;
			}
		}
	}
	/*----- PROTECTED REGION ID(Pico14Class::erase_dynamic_attributes) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Pico14Class::erase_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Method      : Pico14Class::get_attr_by_name()
 *	Description : returns Tango::Attr * object found by name
 */
//--------------------------------------------------------
Tango::Attr *Pico14Class::get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname)
{
	vector<Tango::Attr *>::iterator it;
	for (it=att_list.begin() ; it<att_list.end() ; ++it)
		if ((*it)->get_name()==attname)
			return (*it);
	//	Attr does not exist
	return NULL;
}


/*----- PROTECTED REGION ID(Pico14Class::Additional Methods) ENABLED START -----*/

/*----- PROTECTED REGION END -----*/	//	Pico14Class::Additional Methods
} //	namespace
